[tool.poetry]
name = "testzeus-hercules"
version = "0.1.1"
description = "Hercules: The World's First Open-Source AI Agent for End-to-End Testing"
authors = ["Shriyansh Agnihotri <shriyansh@testzeus.com>"]
readme = "README.md"
homepage = "https://testzeus.com/hercules"
repository = "https://github.com/testzeus/testzeus-hercules"
documentation = "https://testzeus.com/hercules/docs"
keywords = ["AI", "end-to-end testing", "automation", "Hercules", "TestZeus"]
exclude = [
    "scout/screen_shots/*",
    "scout/log_files/*",
]

[tool.poetry.dependencies]
python = "<3.13,>=3.10"
nest-asyncio = "^1.6.0"

 
pillow = "^10.3.0"
playwright = "<=1.49.0"
pydantic = "^2.6.2"
python-dotenv = "^1.0.0"
python-json-logger = "^2.0.7"
pyyaml = "^6.0.1"

sqlalchemy = "^2.0.36"
junitparser = "^3.2.0"
sentry-sdk = "^2.18.0"
playwright-recaptcha = "^0.5.1"
junit2html = "^31.0.2"
aiohttp = "^3.11.7"
inflection = "^0.5.1"
ag2 = {extras = ["retrievechat", "ollama", "anthropic", "openai", "groq", "gemini", "lmm", "mistral", "bedrock", "gemini"], version = "0.8.1"}
aiofiles = "^24.1.0"
chromadb = "^0.6.3"
sentence-transformers = "^3.4.1"
unstructured = {extras = ["all-docs"], version = "^0.16.21"}
httpx = "^0.28.1"
portkey-ai = "^1.11.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
coverage = "^7.6.4"
black = "^24.10.0"
isort = "^5.13.2"
pytest-cov = "^6.0.0"
mypy = "^1.13.0"
gitchangelog = "^3.0.4"
mkdocs = "^1.6.1"
ipdb = "^0.13.13"
twine = "^5.1.1"
deptry = "^0.21.0"
pytest-rerunfailures = "^15.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
testzeus-hercules = 'testzeus_hercules.__main__:main'

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["testzeusagent",]

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = false

[tool.ruff]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "B008",    # Do not perform function calls in argument defaults
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "D202",    # No blank lines allowed after function docstring
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
]
exclude = [
    "testzeusagent/db/migrations",
    ".venv/"
]
lint.mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float", "bytes"]
